service: instanceOperator
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  stage: ${env:STAGE, 'dev'}
  lambdaHashingVersion: 20201221
  region: ap-northeast-1
  memorySize: 128
  logRetentionInDays: 3
  apiGateway:
    apiKeys:
      - discord-${self:provider.stage}
    usagePlan:
      quota:
        limit: 1000
        offset: 0
        period: DAY
      throttle:
        rateLimit: 2
        burstLimit: 1

plugins:
  - serverless-python-requirements

functions:
  setRoute53Record:
    handler: handler/set_route53_record.lambda_handler
    timeout: 60
    role: setRoute53Role
    environment:
      DOMAIN_NAME: ${env:DOMAIN_NAME}
      HOSTEDZONE_ID: ${env:HOSTEDZONE_ID}
      WEBHOOK_URL: ${env:WEBHOOK_URL}
      AVATAR_URL: ${env:AVATAR_URL}
    events:
      - cloudwatchEvent:
          event:
            source:
              - "aws.ec2"
            detail-type:
              - "EC2 Instance State-change Notification"
            detail:
              state:
                - running
                - stopping
              instance-id:
                - ${env:INSTANCE_ID}
  ec2Operator:
    handler: handler/ec2_operator.lambda_handler
    timeout: 30
    role: ec2OperatorRole
    environment:
      INSTANCE_ID: ${env:INSTANCE_ID}
    events:
      - http:
          path: api/discord
          cors: true
          method: get
          private: true

resources:
  Resources:
    setRoute53Role:
      Type: AWS::IAM::Role
      Properties:
        Path: "/instanceoperator/"
        RoleName: ${self:service}-lambdarole-route53-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonRoute53FullAccess
          - arn:aws:iam::aws:policy/AmazonEC2FullAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    ec2OperatorRole:
      Type: AWS::IAM::Role
      Properties:
        Path: "/instanceoperator/"
        RoleName: ${self:service}-lambdarole-lambda53Role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEC2FullAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

custom:
  pythonRequirements:
    dockerizePip: true

package:
  patterns:
    - '!.git/**'
    - '!node_modules'
    - '!node_modules/**'
    - '!__pycache__'
    - '!shell/**'
